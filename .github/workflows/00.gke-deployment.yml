name: 00.gke-development

on:
  workflow_call:
    inputs:
      IMAGE_FE:
        required: true
        type: string
      IMAGE_NGINX:
        required: true
        type: string
      INGRESS_IP:
        required: true
        type: string
      PERSONAL_TOTO_CDN:
        required: true
        type: string
      COMMON_TOTO_CDN:
        required: true
        type: string
      PUBLIC_CDN:
        required: true
        type: string
      DOT_ENV_FILE_NAME:
        required: true
        type: string
      PORT:
        required: true
        type: string
    secrets:
      HARBOR_URL:
        required: true
      HARBOR_USERNAME:
        required: true
      HARBOR_PASSWORD:
        required: true
      SSH_PRIVATE_KEY:
        required: true
      SERVER_IP:
        required: true
      SERVER_USER:
        required: true
      LIVEKIT_API_KEY:
        required: true
      LIVEKIT_API_SECRET:
        required: true
      NEXT_PUBLIC_LIVEKIT_URL:
        required: true

env:
  IMAGE_FE: ${{ inputs.IMAGE_FE }}
  IMAGE_NGINX: ${{ inputs.IMAGE_NGINX }}
  PERSONAL_TOTO_CDN: ${{ inputs.PERSONAL_TOTO_CDN }}
  COMMON_TOTO_CDN: ${{ inputs.COMMON_TOTO_CDN }}
  PUBLIC_CDN: ${{ inputs.PUBLIC_CDN }}
  INGRESS_IP: ${{ inputs.INGRESS_IP }}
  DOT_ENV_FILE_NAME: ${{ inputs.DOT_ENV_FILE_NAME }}
  PORT: ${{ inputs.PORT }}
  HARBOR_URL: ${{ secrets.HARBOR_URL }}
  HARBOR_USERNAME: ${{ secrets.HARBOR_USERNAME }}
  HARBOR_PASSWORD: ${{ secrets.HARBOR_PASSWORD }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  SERVER_IP: ${{ secrets.SERVER_IP }}
  SERVER_USER: ${{ secrets.SERVER_USER }}
  GITHUB_SHA: ${{ github.sha }}

jobs:
  setup-build-publish-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Prepare dotenv
        run: rm -rf .env && mv $DOT_ENV_FILE_NAME .env

      - name: Install Yarn
        run: npm install -g yarn

      - name: Grant execute permission for nginx
        run: chmod +x ./deploy/*

      - name: Create nginx folder
        run: mkdir ./nginx && mkdir ./nginx/conf.d

      - name: Generate default nginx configuration file setting
        run: ./deploy/nginx.default.conf.sh "$INGRESS_IP" "$PERSONAL_TOTO_CDN" "$COMMON_TOTO_CDN" "$PUBLIC_CDN" > ./nginx/conf.d/default.conf

      - name: Generate nginx configuration file setting
        run: ./deploy/nginx.conf.sh > ./nginx/nginx.conf

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build Docker image
        run: docker-compose build

      - name: Log in to Harbor
        run: docker login $HARBOR_URL -u "$HARBOR_USERNAME" -p "$HARBOR_PASSWORD"  

      - name: Deploy with Docker Compose
        run: docker compose push

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Deploy
        run: |
          ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "
            docker pull $HARBOR_URL/$HARBOR_USERNAME/$IMAGE_FE:$GITHUB_SHA
            # docker pull $HARBOR_URL/$HARBOR_USERNAME/$IMAGE_NGINX:$GITHUB_SHA
            docker stop $IMAGE_FE || true
            # docker stop $IMAGE_NGINX || true
            docker rm $IMAGE_FE || true
            # docker rm $IMAGE_NGINX || true
            docker run -d  -p ${PORT}:3000 --name $IMAGE_FE $HARBOR_URL/$HARBOR_USERNAME/$IMAGE_FE:$GITHUB_SHA
            # docker run -d -p 4002:80 --name $IMAGE_NGINX $HARBOR_URL/$HARBOR_USERNAME/$IMAGE_NGINX:$GITHUB_SHA
          "